import numpy as np
import pandas as pd
import itertools
import csv

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

fake_news_file_path = "C:\Python Projects\Fake.csv"
true_news_file_path = "C:\Python Projects\True.csv"

# Read Fake.csv
df_fake = pd.read_csv(fake_news_file_path)
df_fake['label'] = "Fake"
df_fake.to_csv("fake_news.csv", index=False)

# Read True.csv
df_true = pd.read_csv(true_news_file_path)
df_true['label'] = "True"
df_true.to_csv("true_news.csv", index=False)

merged_data = []

with open("fake_news.csv", 'r', encoding='utf-8') as file1:
    reader = csv.reader(file1)
    for row in reader:
        merged_data.append(row)

with open("true_news.csv", 'r', encoding='utf-8') as file2:
    reader = csv.reader(file2)
    for row in reader:
        merged_data.append(row)
merged_file_path = 'merged.csv'

with open(merged_file_path, 'w', newline='', encoding='utf-8') as merged_file:
    writer = csv.writer(merged_file)
    writer.writerows(merged_data)

# Read the merged data
df = pd.read_csv("merged.csv")

# Get shape and head
print(df.shape)
print(df.head())

# Split the dataset
x_train, x_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=7)

# Initialize a TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

# Fit and transform the train set, transform the test set
tfidf_train = tfidf_vectorizer.fit_transform(x_train)
tfidf_test = tfidf_vectorizer.transform(x_test)

# Initialize a PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train, y_train)

# Predict on the test set and calculate accuracy
y_pred = pac.predict(tfidf_test)
score = accuracy_score(y_test, y_pred)
print(f'Accuracy: {round(score * 100, 2)}%')

# Build a confusion matrix
cm = confusion_matrix(y_test, y_pred, labels=['Fake', 'True'])
print(cm)
